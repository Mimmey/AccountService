type: edu
files:
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'

        compileOnly 'org.projectlombok:lombok:1.18.22'
        annotationProcessor 'org.projectlombok:lombok:1.18.22'

        testCompileOnly 'org.projectlombok:lombok:1.18.22'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

        runtimeOnly 'com.h2database:h2'
    }
  learner_created: false
- name: src/account/AccountServiceApplication.java
  visible: true
  text: |-
    package account;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AccountServiceApplication {

        public static void main(String[] args) {
            SpringApplication.run(AccountServiceApplication.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
    spring.datasource.url=jdbc:h2:file:../service_db
    server.error.include-message=always
    spring.jpa.hibernate.ddl-auto=update
  learner_created: false
- name: src/account/presentation/AuthController.java
  visible: true
  text: |
    package account.presentation;

    import account.business.entities.User;
    import account.business.services.AuthService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;
    import org.springframework.web.server.ResponseStatusException;

    import javax.validation.Valid;
    import java.util.Optional;

    @RestController
    public class AuthController {
        @Autowired
        AuthService authService;

        @PostMapping("api/auth/signup")
        public User register(@Valid @RequestBody User user) {
            Optional<User> optUser = authService.register(user);
            if (optUser.isEmpty()) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "This email is already registered");
            }

            return optUser.get();
        }

        @PostMapping("api/auth/changepass")
        public void changePassword() {

        }
    }
  learner_created: false
- name: src/account/presentation/BusinessController.java
  visible: true
  text: |
    package account.presentation;

    import account.business.entities.User;
    import account.business.services.AuthService;
    import account.business.services.BusinessService;
    import account.config.UserDetailsImpl;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.Optional;

    @RestController
    public class BusinessController {
        @Autowired
        BusinessService businessService;

        @GetMapping("api/empl/payment")
        public User getPayments(@AuthenticationPrincipal UserDetails details) {
            Optional<User> optUser = businessService.getUserByEmail(details.getUsername());
            if (optUser.isEmpty()) {
                throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Something went wrong");
            }

            return optUser.get();
        }

        @PostMapping("api/acct/payments")
        public void uploadPayroll() {

        }

        @PutMapping("api/acct/payments")
        public void updatePayment() {

        }
    }
  learner_created: false
- name: src/account/presentation/ServiceController.java
  visible: true
  text: |
    package account.presentation;

    import org.springframework.web.bind.annotation.DeleteMapping;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PutMapping;
    import org.springframework.web.bind.annotation.RestController;

    @RestController
    public class ServiceController {

        @PutMapping("api/admin/role")
        public static void changeRole() {

        }

        @DeleteMapping("api/admin/user")
        public static void deleteUser() {

        }

        @GetMapping("api/admin/user")
        public static void getAllUsersInfo() {

        }
    }
  learner_created: false
- name: src/account/config/UserDetailsImpl.java
  visible: true
  text: |
    package account.config;

    import account.business.entities.User;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import java.util.Collection;
    import java.util.List;

    public class UserDetailsImpl implements UserDetails {

        private final String username;
        private final String password;
        private final List<GrantedAuthority> rolesAndAuthorities;

        public UserDetailsImpl(User user) {
            this.username = user.getEmail();
            this.password = user.getPassword();
            this.rolesAndAuthorities = List.of(new SimpleGrantedAuthority(Roles.USER.getRole()));
        }

        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            return rolesAndAuthorities;
        }

        @Override
        public String getPassword() {
            return password;
        }

        @Override
        public String getUsername() {
            return username;
        }

        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return true;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }
    }
  learner_created: false
- name: src/account/persistence/UserRepository.java
  visible: true
  text: |
    package account.persistence;

    import account.business.entities.User;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    import java.util.Optional;

    @Repository
    public interface UserRepository extends CrudRepository<User, Long> {
        User save(User user);
        Optional<User> findByEmail(String email);
    }
  learner_created: false
- name: src/account/config/WebSecurityConfigurerImpl.java
  visible: true
  text: |
    package account.config;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.http.HttpMethod;
    import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
    import org.springframework.security.config.http.SessionCreationPolicy;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;

    @EnableWebSecurity
    public class WebSecurityConfigurerImpl extends WebSecurityConfigurerAdapter {

        @Autowired
        RestAuthenticationEntryPoint restAuthenticationEntryPoint;
        @Autowired
        UserDetailsService userDetailService;

        @Override
        protected void configure(AuthenticationManagerBuilder auth) throws Exception {
            auth
                    .userDetailsService(userDetailService)
                    .passwordEncoder(getEncoder());
        }

        @Override
        protected void configure(HttpSecurity http) throws Exception {
            http.httpBasic()
                    .authenticationEntryPoint(restAuthenticationEntryPoint)
                    .and()
                    .csrf().disable().headers().frameOptions().disable()
                    .and()
                    .authorizeRequests()
                    .antMatchers("/api/auth/signup").permitAll()
                    .mvcMatchers(HttpMethod.GET, "/api/empl/payment").authenticated()
                    .mvcMatchers("/").authenticated()
                    .and()
                    .sessionManagement()
                    .sessionCreationPolicy(SessionCreationPolicy.STATELESS);
        }

        @Bean
        public PasswordEncoder getEncoder() {
            return new BCryptPasswordEncoder();
        }
    }
  learner_created: false
- name: src/account/config/RestAuthenticationEntryPoint.java
  visible: true
  text: |
    package account.config;

    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.stereotype.Component;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    @Component
    public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {
        @Override
        public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
        }
    }
  learner_created: false
- name: src/account/business/services/AuthService.java
  visible: true
  text: |
    package account.business.services;

    import account.business.entities.User;
    import account.config.UserDetailsImpl;
    import account.persistence.UserRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.Optional;

    @Service
    public class AuthService {
        @Autowired
        UserRepository userRepository;
        @Autowired
        PasswordEncoder encoder;

        public Optional<User> register(User user) {
            user.setPassword(encoder.encode(user.getPassword()));

            Optional<User> optUser = userRepository.findByEmail(user.getEmail());
            if (optUser.isPresent()) {
                return Optional.of(null);
            }

            return Optional.of(userRepository.save(user));
        }
    }
  learner_created: false
- name: src/account/business/services/UserDetailsServiceImpl.java
  visible: true
  text: |
    package account.business.services;

    import account.business.entities.User;
    import account.config.UserDetailsImpl;
    import account.persistence.UserRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.Optional;

    @Service
    public class UserDetailsServiceImpl implements UserDetailsService {
        @Autowired
        UserRepository userRepository;

        @Override
        public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
            Optional<User> user = userRepository.findByEmail(username);

            if (user.isEmpty()) {
                throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Not found email: " + username);
            }

            return new UserDetailsImpl(user.get());
        }
    }
  learner_created: false
- name: src/account/business/services/BusinessService.java
  visible: true
  text: |
    package account.business.services;

    import account.business.entities.User;
    import account.persistence.UserRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;

    import java.util.Optional;

    @Service
    public class BusinessService {
        @Autowired
        UserRepository userRepository;

        public Optional<User> getUserByEmail(String email) {
            Optional<User> optUser = userRepository.findByEmail(email);
            return optUser;
        }
    }
  learner_created: false
- name: test/AccountServiceTest.java
  visible: false
  text: |-
    import account.AccountServiceApplication;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import com.google.gson.JsonParser;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.springframework.http.HttpStatus;

    import java.util.*;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class TestReq {

      private Map<String, Object> properties = new LinkedHashMap<>();

      // Deep copy
      public TestReq(TestReq another) {
        this.properties = another.properties.entrySet().stream()
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
      }

      public TestReq() {
      }

      public String toJson() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        try {
          return mapper.writeValueAsString(this.properties);
        } catch (JsonProcessingException e) {
          System.out.println(e.getMessage());
          return null;
        }
      }

      public TestReq setProps(String key, Object value) {
        properties.put(key, value);
        return this;
      }

    }

    public class AccountServiceTest extends SpringTest {

      private  final String signUpApi = "/api/auth/signup";
      private  final String changePassApi = "/api/auth/changepass";
      private  final String getEmployeePaymentApi = "/api/empl/payment";
      private final String postPaymentApi = "/api/acct/payments";
      private final String putRoleApi = "/api/admin/user/role";
      private final String adminApi = "/api/admin/user/";


      static String[] breachedPass= new String[]{"PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch",
              "PasswordForApril", "PasswordForMay", "PasswordForJune",
              "PasswordForJuly", "PasswordForAugust", "PasswordForSeptember",
              "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"};

      List<Integer> userIdList = new ArrayList<>();

      private final TestReq ivanIvanov = new TestReq().setProps("name", "Ivan")
              .setProps("lastname", "Ivanov")
              .setProps("email", "IvanIvanov@acme.com")
              .setProps("password", "rXoa4CvqpLxW");
      private final TestReq petrPetrov = new TestReq().setProps("name", "Petr")
              .setProps("lastname", "Petrov")
              .setProps("email", "PetrPetrov@acme.com")
              .setProps("password", "nWza98hjkLPE");
      private final TestReq johnDoe = new TestReq().setProps("name", "John")
              .setProps("lastname", "Doe")
              .setProps("email", "JohnDoe@acme.com")
              .setProps("password", "oMoa3VvqnLxW");
      private final TestReq maxMus = new TestReq().setProps("name", "Max")
              .setProps("lastname", "Mustermann")
              .setProps("email", "MaxMustermann@acme.com")
              .setProps("password", "ai0y9bMvyF6G");
      private final TestReq captainNemo = new TestReq().setProps("name", "Captain")
              .setProps("lastname", "Nemo")
              .setProps("email", "nautilus@pompilius.com")
              .setProps("password", "wings");
      private final TestReq ivanHoe = new TestReq().setProps("name", "Ivan")
              .setProps("lastname", "Hoe")
              .setProps("email", "IvanHoe@acme.com")
              .setProps("password", "nWza98hjkLPE");

      private final String ivanIvanovCorrectUser = ivanIvanov.toJson();
      private final String petrPetrovCorrectUser = petrPetrov.toJson();
      private final String ivanHoeCorrectUser = ivanHoe.toJson();
      private final String jDCorrectUser = johnDoe.toJson();
      private final String jDEmptyName = new TestReq(johnDoe).setProps("name", "").toJson();
      private final String jDNoName = new TestReq(johnDoe).setProps("name", null).toJson();
      private final String jDEmptyLastName = new TestReq(johnDoe).setProps("lastname", "").toJson();
      private final String jDNoLastName = new TestReq(johnDoe).setProps("lastname", null).toJson();
      private final String jDEmptyEmail = new TestReq(johnDoe).setProps("email", "").toJson();
      private final String jDNoEmail = new TestReq(johnDoe).setProps("email", null).toJson();
      private final String jDEmptyPassword = new TestReq(johnDoe).setProps("password", "").toJson();
      private final String jDNoPassword = new TestReq(johnDoe).setProps("password", null).toJson();
      private final String jDWrongEmail1 = new TestReq(johnDoe).setProps("email", "johndoeacme.com").toJson();
      private final String jDWrongEmail2 = new TestReq(johnDoe).setProps("email", "johndoe@google.com").toJson();
      private final String maxMusCorrectUser = maxMus.toJson();
      private final String jDLower = new TestReq(johnDoe).setProps("email", "johndoe@acme.com").toJson();
      private final String maxMusLower = new TestReq(maxMus).setProps("email", "maxmustermann@acme.com").toJson();
      private final String jDWrongPassword = new TestReq(johnDoe).setProps("password", "none").toJson();
      private final String maxMusWrongPassword = new TestReq(maxMus).setProps("password", "none").toJson();
      private final String maxMusWrongEmail = new TestReq(maxMus).setProps("email", "maxmustermann@google.com").toJson();
      private final String captainNemoWrongUser = captainNemo.toJson();
      private final String jDNewPass = new TestReq(johnDoe).setProps("password", "aNob5VvqzRtb").toJson();

      private final String jDDuplicatePass = new TestReq().setProps("new_password", "oMoa3VvqnLxW").toJson();
      private final String jDShortPass = new TestReq().setProps("new_password", "oMoa3Vvqn").toJson();
      private final String jDPass = new TestReq().setProps("new_password", "aNob5VvqzRtb").toJson();

      private String paymentsList = convert(new String[]{
              new TestReq().setProps("employee", "ivanivanov@acme.com").setProps("period", "01-2021")
                      .setProps("salary", 654321).toJson(),
              new TestReq().setProps("employee", "ivanivanov@acme.com").setProps("period", "02-2021")
                      .setProps("salary", 987).toJson(),
              new TestReq().setProps("employee", "ivanivanov@acme.com").setProps("period", "03-2021")
                      .setProps("salary", 21).toJson(),
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                      .setProps("salary", 123456).toJson(),
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "02-2021")
                      .setProps("salary", 456789).toJson(),
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "03-2021")
                      .setProps("salary", 12).toJson()
      });
      private final String wrongPaymentListData = convert(new String[]{new TestReq().setProps("employee", "maxmustermann@acme.com")
              .setProps("period", "13-2021").setProps("salary", 123456).toJson()});
      private  String wrongPaymentListSalary = convert(new String[]{new TestReq().setProps("employee", "johndoe@acme.com")
              .setProps("period", "11-2022").setProps("salary", -1).toJson()});
      private final String wrongPaymentListDuplicate = convert(new String[]{
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                      .setProps("salary", 123456).toJson(),
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                      .setProps("salary", 456789).toJson()
      });
      private final String updatePayment = new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
              .setProps("salary", 77777).toJson();
      private final String updatePaymentResponse = new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
              .setProps("period", "January-2021").setProps("salary", "777 dollar(s) 77 cent(s)").toJson();
      private final String updatePaymentWrongDate = new TestReq().setProps("employee", "maxmustermann@acme.com")
              .setProps("period", "13-2021").setProps("salary", 1234567).toJson();
      private final String updatePaymentWrongSalary = new TestReq().setProps("employee", "maxmustermann@acme.com")
              .setProps("period", "11-2022").setProps("salary", -1).toJson();
      private final String correctPaymentResponse = convert(new String[]{
              new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("period", "March-2021").setProps("salary", "0 dollar(s) 12 cent(s)").toJson(),
              new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("period", "February-2021").setProps("salary", "4567 dollar(s) 89 cent(s)").toJson(),
              new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("period", "January-2021").setProps("salary", "1234 dollar(s) 56 cent(s)").toJson()
      });
      private final String correctPaymentResponseIvanov = convert(new String[]{
              new TestReq().setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("period", "March-2021").setProps("salary", "0 dollar(s) 21 cent(s)").toJson(),
              new TestReq().setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("period", "February-2021").setProps("salary", "9 dollar(s) 87 cent(s)").toJson(),
              new TestReq().setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("period", "January-2021").setProps("salary", "6543 dollar(s) 21 cent(s)").toJson()
      });
      private final String firstResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 4).setProps("name", "Petr").setProps("lastname", "Petrov")
                      .setProps("email", "petrpetrov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });
      private final String secondResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });
      private final String thirdResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com").
                      setProps("roles", new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}).toJson()
      });
      private final String fourthResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 4).setProps("name", "Ivan").setProps("lastname", "Hoe")
                      .setProps("email", "ivanhoe@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });

      public AccountServiceTest() {
        super(AccountServiceApplication.class, "../service_db.mv.db");
      }

      private String convert(String[] trs) {
        JsonArray  jsonArray = new JsonArray();
        for (String tr : trs) {
          JsonElement jsonObject = JsonParser.parseString(tr);
          jsonArray.add(jsonObject);
        }
        return jsonArray.toString();
      }


      CheckResult testApi(String user, String body, int status, String api, String method, String message) {

        HttpResponse response = checkResponseStatus(user, body, status, api, method, message);

        return CheckResult.correct();
      }

      /**
       * Method for checking response on Post request for signup API
       *
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostSignUpResponse(String body, int status, String[] role) {

        HttpResponse response = checkResponseStatus(null, body, status, signUpApi, "POST", "");

        JsonObject rightResponse = getJson(body).getAsJsonObject();
        rightResponse.remove("password");

        // Check is it JSON in response or something else
        if (!response.getJson().isJsonObject()) {
          return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonObject jsonResponse = response.getJson().getAsJsonObject();

        // Check if password is presence in response
        if (jsonResponse.get("password") != null) {
          return CheckResult.wrong("You must remove password from response\n" +
                  jsonResponse);
        }

        if (jsonResponse.get("id") == null) {
          return CheckResult.wrong("Response must contain user ID\n" +
                  "Received response:\n" +
                  jsonResponse);
        }


        // Check JSON in response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("id", isInteger())
                        .value("name", rightResponse.get("name").getAsString())
                        .value("lastname", rightResponse.get("lastname").getAsString())
                        .value("email", isString(s -> s.equalsIgnoreCase(rightResponse.get("email").getAsString())))
                        .value("roles", role));

        if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
          return CheckResult.wrong("User ID must be unique!\n" +
                  "Received response:\n" +
                  jsonResponse);
        }


        userIdList.add(jsonResponse.get("id").getAsInt());
        return CheckResult.correct();
      }

      /**
       * Method for check the prohibition of requests specified types
       *
       * @param api testing api (String)
       * @param deniedMethods list of prohibited type requests
       * @param body string representation of body content in JSON format (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testDeniedMethods(String api, List<String> deniedMethods, String body) {

        HttpRequest getReq = get(api);
        HttpRequest postReq = post(api, body);
        HttpRequest putReq = put(api, body);
        HttpRequest deleteReq = delete(api);

        Map<String, HttpRequest> methodsMap = new LinkedHashMap<String,  HttpRequest>() {{
          put("get", getReq);
          put("post", postReq);
          put("put", putReq);
          put("delete", deleteReq);
        }};

        for (Map.Entry<String, HttpRequest> entry : methodsMap.entrySet()) {
          if (deniedMethods.contains(entry.getKey())) {
            HttpResponse response = entry.getValue().send();
            if (response.getStatusCode() != 405) {
              return CheckResult.wrong("Method " + entry.getKey().toUpperCase() + " is not allowed for " + api + " status code should be " +
                      "405, responded: " + response.getStatusCode());
            }
          }
        }
        return CheckResult.correct();
      }

      /**
       * Method for restarting application
       *
       */
      private CheckResult restartApplication() {
        try {
          reloadSpring();
        } catch (Exception ex) {
          throw new UnexpectedError(ex.getMessage());
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking authentication
       *
       * @param user string representation of user information in JSON format (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserRegistration(String user, int status, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, getEmployeePaymentApi, "GET", message);

        return CheckResult.correct();
      }

      CheckResult testChangePassword(String api, String body, int status, String user) {
        JsonObject userJson = getJson(user).getAsJsonObject();

        HttpResponse response = checkResponseStatus(user, body, status, api, "POST", "");

        // Check JSON in response
        if (status == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("email", userJson.get("email").getAsString().toLowerCase())
                          .value("status", "The password has been updated successfully"));
        }
        return CheckResult.correct();
      }

      /**
       * Method for testing duplicate users
       *
       * @param user string representation of user information in JSON format (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserDuplicates(String user) {
        HttpResponse response = post(signUpApi, user).send();
        // Check error message field in JSON response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("status", 400)
                        .value("error", "Bad Request")
                        .value("message", "User exist!")
                        .anyOtherValues());
        return CheckResult.correct();
      }

      private CheckResult testBreachedPass(String api, String login, String password, String body, String message) {
        JsonObject json = getJson(body).getAsJsonObject();
        HttpResponse response;
        for (int index = 0; index < breachedPass.length; index++) {
          if (json.has("password")) {
            json.remove("password");
            json.addProperty("password", breachedPass[index]);
          } else if (json.has("new_password")) {
            json.remove("new_password");
            json.addProperty("new_password", breachedPass[index]);
          }
          if (login.isEmpty() || password.isEmpty()) {
            response = post(api, json.toString()).send();
          } else {
            response = post(api, json.toString()).basicAuth(login, password).send();
          }

          if (response.getStatusCode() != 400) {
            return CheckResult.wrong("POST " + api + " should respond with "
                    + "status code 400 , responded: " + response.getStatusCode() + "\n"
                    + "Response body:\n" + response.getContent() + "\n"
                    + "Request body:\n" + json.toString() + "\n"
                    + message);
          }
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", 400)
                          .value("error", "Bad Request")
                          .value("message", "The password is in the hacker's database!")
                          .anyOtherValues());

        }
        return CheckResult.correct();
      }


      CheckResult testPostPaymentResponse(String user, String body, int status, String message) {

        HttpResponse response = checkResponseStatus(user, body, status, postPaymentApi, "POST", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", "Added successfully!")
                          .anyOtherValues());
        }
        if (response.getStatusCode() == 400) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", "Bad Request")
                          .value("path", "/api/acct/payments")
                          .value("status", 400)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testPutPaymentResponse(String user, String body, int status, String message) {

        HttpResponse response = checkResponseStatus(user, body, status, postPaymentApi, "PUT", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", "Updated successfully!")
                          .anyOtherValues());
        }
        if (response.getStatusCode() == 400) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", "Bad Request")
                          .value("path", "/api/acct/payments")
                          .value("status", 400)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testGetPaymentResponse(String user, int status, String correctResponse, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, getEmployeePaymentApi , "GET", message);

        JsonArray correctJson = getJson(correctResponse).getAsJsonArray();
        JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

        // Check is it array of JSON in response or something else
        if (!response.getJson().isJsonArray()) {
          return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                  response.getContent().getClass());
        }

        if (responseJson.size() == 0)  {
          return CheckResult.wrong("No data in response body" + "\n"
                  + "in response " + getPrettyJson(responseJson)  + "\n"
                  + "must be " + getPrettyJson(correctJson));
        }

        if (correctJson.size() != responseJson.size()) {
          return CheckResult.wrong("New data should not be added" + "\n"
                  + "in response " + getPrettyJson(responseJson)  + "\n"
                  + "must be " + getPrettyJson(correctJson));
        }

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          for (int i = 0; i < responseJson.size(); i++) {
            if (!responseJson.get(i).equals(correctJson.get(i))) {
              return CheckResult.wrong("Get " + getEmployeePaymentApi  +" wrong data in response body" + "\n"
                      + "in response " + getPrettyJson(responseJson) + "\n"
                      + "must be " + getPrettyJson(correctJson));
            }
          }
        }
        return CheckResult.correct();
      }

      CheckResult testGetPaymentResponseParam(String user, int status, String request, String correctResponse, String message) {
        JsonObject userJson = getJson(user).getAsJsonObject();
        String password = userJson.get("password").getAsString();
        String login = userJson.get("email").getAsString().toLowerCase();
        JsonObject json = getJson(correctResponse).getAsJsonObject();
        JsonObject jsonRequest = getJson(request).getAsJsonObject();
        String param = jsonRequest.get("period").getAsString();
        HttpResponse response = get(getEmployeePaymentApi).addParam("period", param).basicAuth(login, password).send();
        if (response.getStatusCode() != status) {
          throw new WrongAnswer("GET" + " " + getEmployeePaymentApi + "?" + param + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n");
        }
        // Check JSON in response
        if (response.getStatusCode() == 200) {
          if (!response.getJson().equals(json)) {
            return CheckResult.wrong("Get " + getEmployeePaymentApi  + "?period=" + param
                    + " wrong data in response body" + "\n"
                    + "in response " + getPrettyJson(response.getJson()) + "\n"
                    + "must be " + getPrettyJson(json));
          }
        }

        if (response.getStatusCode() == 400) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", "Bad Request")
                          .value("path", "/api/empl/payment")
                          .value("status", 400)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      private CheckResult testGetAdminApi(String api, int status, String user, String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, api, "GET", message);

        // Check is it array of JSON in response or something else
        if (!response.getJson().isJsonArray()) {
          return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                  response.getContent().getClass());
        }

        JsonArray correctJson = getJson(answer).getAsJsonArray();
        JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();


        if (responseJson.size() == 0)  {
          return CheckResult.wrong("No data in response body" + "\n"
                  + "in response " + getPrettyJson(responseJson)  + "\n"
                  + "must be " + getPrettyJson(correctJson));
        }

        if (responseJson.size() != correctJson.size())  {
          return CheckResult.wrong("Wrong dataa in response body" + "\n"
                  + "in response " + getPrettyJson(responseJson)  + "\n"
                  + "must be " + getPrettyJson(correctJson));
        }


        // Check JSON in response
        if (response.getStatusCode() == 200) {
          for (int i = 0; i < responseJson.size(); i++) {
            String[] roles = new String[correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size()];
            for(int j=0; j<correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size(); j++) {
              roles[j]=correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").get(j).getAsString();
            }
            expect(responseJson.get(i).getAsJsonObject().toString()).asJson()
                    .check(isObject()
                            .value("id", isInteger())
                            .value("name", correctJson.get(i).getAsJsonObject().get("name").getAsString())
                            .value("lastname", correctJson.get(i).getAsJsonObject().get("lastname").getAsString())
                            .value("email", correctJson.get(i).getAsJsonObject().get("email").getAsString())
                            .value("roles", isArray( roles )));
          }
        }
        return CheckResult.correct();
      }


      CheckResult testDeleteAdminApi(String api, HttpStatus status, String user, String param,
                                     String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status.value(),
                api + param, "DELETE", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("user", param.toLowerCase())
                          .value("status", answer));
        }

        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api + param)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testPutAdminApi(String api, HttpStatus status, String user, String reqUser,
                                  String role, String operation, String[] respRoles, String message) {

        JsonObject jsonUser = getJson(reqUser).getAsJsonObject();
        JsonObject request = new JsonObject();
        request.addProperty("user", jsonUser.get("email").getAsString());
        request.addProperty("operation", operation);
        request.addProperty("role", role);

        HttpResponse response = checkResponseStatus(user, request.toString(), status.value(), api, "PUT", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("id", isInteger())
                          .value("name", jsonUser.get("name").getAsString())
                          .value("lastname", jsonUser.get("lastname").getAsString())
                          .value("email", jsonUser.get("email").getAsString().toLowerCase())
                          .value("roles", isArray(respRoles)));
        }

        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", respRoles[0])
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testRoleModelNegative(String api, String method, HttpStatus status, String user, String body, String message) {

        HttpResponse response = checkResponseStatus(user, body, status.value(), api, method.toUpperCase(), message);

        // Check JSON in response
        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", "Access Denied!")
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      /**
       * Method for testing api response
       *
       * @param user string representation of user information in JSON format (String)
       * @param body request body (String)
       * @param status expected response status (int)
       * @param api testing api (String)
       * @param method method for api (String)
       * @param message test hints for student (String)
       * @return response (HttpResponse)
       */
      private HttpResponse checkResponseStatus(String user, String body,
                                               int status, String api, String method, String message) {
        HttpRequest request = null;
        switch (method) {
          case "GET":
            request = get(api);
            break;
          case "POST":
            request = post(api, body);
            break;
          case "PUT":
            request = put(api, body);
            break;
          case "DELETE":
            request = delete(api);
            break;
        }

        if (user != null) {
          JsonObject userJson = getJson(user).getAsJsonObject();
          String password = userJson.get("password").getAsString();
          String login = userJson.get("email").getAsString().toLowerCase();
          request = request.basicAuth(login, password);
        }
        HttpResponse response = request.send();

        if (response.getStatusCode() != status) {
          throw new WrongAnswer(method + " " + api  + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n");
        }
        return response;
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[] {

              // Testing user registration negative tests
              () -> testApi(null, jDEmptyName, 400, signUpApi, "POST", "Empty name field!"), // 1
              () -> testApi(null, jDNoName, 400, signUpApi, "POST", "Name field is absent!"), // 2
              () -> testApi(null, jDEmptyLastName, 400, signUpApi, "POST", "Empty lastname field!"), // 3
              () -> testApi(null, jDNoLastName, 400, signUpApi, "POST", "Lastname field is absent!"), // 4
              () -> testApi(null, jDEmptyEmail, 400, signUpApi, "POST", "Empty email field!"), // 5
              () -> testApi(null, jDNoEmail, 400, signUpApi, "POST", "Email field is absent!"), // 6
              () -> testApi(null, jDEmptyPassword, 400, signUpApi, "POST", "Empty password field!"), // 7
              () -> testApi(null, jDNoPassword, 400, signUpApi, "POST", "Password field is absent!"),// 8
              () -> testApi(null, jDWrongEmail1, 400, signUpApi, "POST", "Wrong email!"), // 9
              () -> testApi(null, jDWrongEmail2, 400, signUpApi, "POST", "Wrong email!"), // 10
              () -> testBreachedPass(signUpApi, "", "", jDCorrectUser,
                      "Sending password from breached list"), // 11

              // Testing user registration positive tests
              () -> testPostSignUpResponse(jDCorrectUser, 200, new String[] {"ROLE_ADMINISTRATOR"}), // 12
              () -> testPostSignUpResponse(maxMusLower, 200, new String[] {"ROLE_USER"}), // 13
              () -> testPostSignUpResponse(ivanIvanovCorrectUser, 200, new String[] {"ROLE_USER"}), // 14
              () -> testPostSignUpResponse(petrPetrovCorrectUser, 200, new String[] {"ROLE_USER"}), // 15

    //          // Testing user registration negative tests
              () -> testApi(null, jDCorrectUser, 400, signUpApi, "POST", "User must be unique!"), // 16
              () -> testUserDuplicates(jDCorrectUser), // 17
              () -> testApi(null, jDLower, 400, signUpApi, "POST",
                      "User must be unique (ignorecase)!"), // 18

    //
    //          // Test authentication, positive tests
              () -> testUserRegistration(maxMusLower, 200, "User must login!"), // 19
              () -> testUserRegistration(maxMusCorrectUser, 200, "Login case insensitive!"), // 20
    //
    //          // Test authentication, negative tests
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 21
              () -> testUserRegistration(maxMusWrongEmail, 401, "Wrong password!"), // 22
              () -> testUserRegistration(captainNemoWrongUser, 401, "Wrong user"), // 23
              () -> testApi(null, "", 401, getEmployeePaymentApi, "GET",
                      "This api only for authenticated user"), // 24
    //
    //          // Testing changing password
              () -> testApi(null, jDDuplicatePass, 401, changePassApi, "POST",
                      "This api only for authenticated user"), // 25
              () -> testApi(jDCorrectUser, jDShortPass, 400, changePassApi, "POST",
                      "The password length must be at least 12 chars!"), // 26
              () -> testApi(jDCorrectUser, jDDuplicatePass, 400, changePassApi, "POST",
                      "The passwords must be different!"), // 27
              () -> testBreachedPass(changePassApi, "JohnDoe@acme.com", "oMoa3VvqnLxW",
                      jDDuplicatePass, "Sending password from breached list"), // 28
              () -> testChangePassword(changePassApi, jDPass, 200, jDCorrectUser), // 29
              () -> testApi(jDCorrectUser, "", 401, adminApi, "GET",
                      "Password must be changed!"), // 30
              () -> testApi(jDNewPass, "", 200, adminApi, "GET",
                      "Password must be changed!"), // 31

              // Testing persistence
              () -> restartApplication(), // 32
              () -> testUserRegistration(maxMusCorrectUser, 200, "User must login, after restarting!" +
                      " Check persistence."), // 33

              // Testing admin functions
              // Delete user
              () -> testApi(maxMusCorrectUser, "", 403, "/api/admin/user/", "DELETE",
                      "Api must be available only to admin user"), // 34
              () -> testApi(maxMusCorrectUser, "", 403, "/api/admin/user/johndoe@acme.com", "DELETE",
                      "Api must be available only to admin user"), // 35
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      firstResponseAdminApi, "Api must be available to admin user"), // 36
              () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.OK, jDNewPass,
                      "petrpetrov@acme.com", "Deleted successfully!", "Trying to delete user"), // 37
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      secondResponseAdminApi, "User must be deleted!"), // 38
              () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.BAD_REQUEST,
                      jDNewPass, "johndoe@acme.com",
                      "Can't remove ADMINISTRATOR role!", "Trying to delete admin"), // 39
              () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.NOT_FOUND,
                      jDNewPass, "johndoe@goole.com",
                      "User not found!", "Trying to delete non existing user"), // 40
              () -> testPostSignUpResponse(ivanHoeCorrectUser, 200, new String[] {"ROLE_USER"}), // 41
              () -> testUserRegistration(ivanHoeCorrectUser, 200, "User \"ivanhoe@acme.com\" must be added!"), // 42
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      fourthResponseAdminApi, "User \"ivanhoe@acme.com\" must be added!"), // 43
              () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.OK, jDNewPass,
                      "ivanhoe@acme.com", "Deleted successfully!", "Trying to delete user \"ivanhoe@acme.com\""), // 44

              // Testing persistence
              () -> restartApplication(), // 45
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      secondResponseAdminApi, "User must be deleted!"), // 46



              // Changing roles
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDNewPass,
                      ivanIvanovCorrectUser, "ACCOUNTANT", "GRANT",
                      new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}, ""), // 47
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      thirdResponseAdminApi, "Role must be changed!"), // 48
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDNewPass,
                      ivanIvanovCorrectUser, "ACCOUNTANT", "REMOVE",
                      new String[] {"ROLE_USER"}, ""),
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      secondResponseAdminApi, "Role must be changed!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDNewPass,
                      ivanIvanovCorrectUser, "ACCOUNTANT", "GRANT",
                      new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}, ""),

              // Testing admin functions, negative tests
              () -> testPutAdminApi(putRoleApi, HttpStatus.NOT_FOUND, jDNewPass,
                      ivanIvanovCorrectUser, "NEW_ROLE", "GRANT",
                      new String[] {"Role not found!"}, "Trying add not existing role!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      ivanIvanovCorrectUser, "ADMINISTRATOR", "GRANT",
                      new String[] {"The user cannot combine administrative and business roles!"},
                      "Trying add administrative role to business user!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      jDNewPass, "USER", "GRANT",
                      new String[] {"The user cannot combine administrative and business roles!"},
                      "Trying add business role to administrator!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      jDNewPass, "ADMINISTRATOR", "REMOVE",
                      new String[] {"Can't remove ADMINISTRATOR role!"}, "Trying remove administrator role!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      maxMusCorrectUser, "USER", "REMOVE",
                      new String[] {"The user must have at least one role!"}, "Trying remove single role!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      maxMusCorrectUser, "ACCOUNTANT", "REMOVE",
                      new String[] {"The user does not have a role!"}, "Trying remove not granted role!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.NOT_FOUND, jDNewPass,
                      captainNemoWrongUser, "ACCOUNTANT", "REMOVE",
                      new String[] {"User not found!"}, "Trying remove role from non existing user!"),

              // Testing role model negative case
              () -> testRoleModelNegative(putRoleApi, "PUT", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"),
              () -> testRoleModelNegative("/api/admin/user/", "GET", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"),
              () -> testRoleModelNegative("/api/admin/user", "DELETE", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"),
              () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"),
              () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, maxMusCorrectUser,
                      "", "Trying to access endpoint with wrong role"),
              () -> testRoleModelNegative(getEmployeePaymentApi, "GET", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"),

              // Testing business logic
              () -> testPostPaymentResponse(ivanIvanovCorrectUser, paymentsList, 200, "Payment list must be added"),
              () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                      "Wrong status code!"),
              () -> testGetPaymentResponse(ivanIvanovCorrectUser, 200, correctPaymentResponseIvanov,
                      "Wrong status code!"),
              () -> testPostPaymentResponse(ivanIvanovCorrectUser, wrongPaymentListSalary, 400, "Wrong salary in payment list"),
              () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                      "Wrong status code!"),
              () -> testPostPaymentResponse(ivanIvanovCorrectUser, wrongPaymentListData, 400, "Wrong data in payment list"),
              () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                      "Wrong status code!"),
              () -> testPostPaymentResponse(ivanIvanovCorrectUser, wrongPaymentListDuplicate, 400, "Duplicated entry in payment list"),
              () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                      "Wrong status code!"),
              () -> testPutPaymentResponse(ivanIvanovCorrectUser, updatePaymentWrongDate, 400,"Wrong date in request body!"),
              () -> testPutPaymentResponse(ivanIvanovCorrectUser, updatePaymentWrongSalary, 400, "Wrong salary in request body!"),
              () -> testPutPaymentResponse(ivanIvanovCorrectUser, updatePayment, 200, "Salary must be update!"),
              () -> testGetPaymentResponseParam(maxMusCorrectUser, 200, updatePayment, updatePaymentResponse,
                      "Salary must be update!"),
              () -> testGetPaymentResponseParam(maxMusCorrectUser, 400, updatePaymentWrongDate, updatePaymentResponse,
                      "Wrong date in request!"),
      };

    }
  learner_created: false
- name: src/account/business/entities/businesslogicelements/Password.java
  visible: true
  text: |
    package account.business.entities.businesslogicelements;

    import com.fasterxml.jackson.annotation.JsonProperty;

    import lombok.Data;
    import lombok.NoArgsConstructor;

    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.Size;

    @Data
    @NoArgsConstructor
    public class Password {
        @NotBlank
        @Size
        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        private String new_password;

        public Password(String password) {
            this.new_password = password;
        }

    }
  learner_created: true
- name: src/account/business/entities/dto/SalaryUnitDTO.java
  visible: true
  text: |
    package account.business.entities.dto;

    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.NotNull;

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public class SalaryUnitDTO {
        @NotBlank
        private String employee;
        @NotBlank
        private String period;
        @NotNull
        private long salary;
    }
  learner_created: true
- name: src/account/business/entities/dto/BusinessCardDTO.java
  visible: true
  text: |
    package account.business.entities.dto;

    import account.business.businesslogicunits.DateHandler;
    import account.business.entities.dbentities.SalaryUnit;
    import account.business.entities.dbentities.User;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import java.util.Date;

    @Data
    @NoArgsConstructor
    public class BusinessCardDTO {
        private String name;
        private String lastname;
        private String period;
        private String salary;

        public BusinessCardDTO(SalaryUnit salaryUnit, User user) {
            this.name = user.getName();
            this.lastname = user.getLastname();
            setPeriod(salaryUnit.getPeriod());
            setSalary(salaryUnit.getSalary());
        }

        private void setSalary(long salary) {
            long dollars = salary / 100;
            long cents = salary % 100;
            this.salary = String.format("%d dollar(s) %d cent(s)", dollars, cents);
        }

        private void setPeriod(Date period) {
            this.period = DateHandler.parseString(period);
        }
    }
  learner_created: true
- name: src/account/business/services/PasswordService.java
  visible: true
  text: |
    package account.business.services;

    import account.business.entities.dbentities.User;
    import account.business.entities.businesslogicelements.BreachedSet;
    import account.business.entities.businesslogicelements.Password;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    @Service
    public class PasswordService {

        private final static int MIN_SIZE = 12;

        @Autowired
        private PasswordEncoder encoder;

        public void encryptPassword(Password password) {
            password.setNew_password(encoder.encode(password.getNew_password()));
        }

        public void checkAvailability(Password password, User user, BreachedSet breachedSet) {
            checkIfPreviousIsSame(password, user);
            checkIfIsInBreachedList(password, breachedSet);
            checkIfValid(password);
        }

        public void checkAvailability(Password password, BreachedSet breachedSet) {
            checkIfIsInBreachedList(password, breachedSet);
            checkIfValid(password);
        }

        public void checkIfIsInBreachedList(Password password, BreachedSet breachedSet) {
            if (breachedSet.contains(password.getNew_password())) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The password is in the hacker's database!");
            }
        }

        public void checkIfValid(Password password) {
            if (password.getNew_password().length() < MIN_SIZE) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Password length must be " + MIN_SIZE + " chars minimum!");
            }
        }

        public void checkIfPreviousIsSame(Password password, User user) {
            if (encoder.matches(password.getNew_password(), user.getPassword())) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The passwords must be different!");
            }
        }
    }
  learner_created: true
- name: src/account/business/entities/dbentities/User.java
  visible: true
  text: |
    package account.business.entities.dbentities;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import javax.persistence.*;

    import javax.validation.constraints.Email;
    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.Pattern;
    import java.util.List;

    @Data
    @Entity
    @NoArgsConstructor
    public class User {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private long id;

        @NotBlank(message = "Name is required")
        private String name;

        @NotBlank(message = "Lastname is required")
        private String lastname;

        @Email
        @NotBlank(message = "Email is required")
        @Pattern(regexp = "[a-zA-z0-9]+@acme\\.com", message = "Domain should be @acme.com")
        private String email;

        @NotBlank(message = "Password is required")
        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        private String password;

        @JsonIgnore
        @OneToMany(mappedBy = "user")
        private List<SalaryUnit> salaryUnits;

        public User(String name, String lastname, String email, String password) {
            this.name = name;
            this.lastname = lastname;
            this.email = email.toLowerCase();
            this.password = password;
        }
    }
  learner_created: true
- name: src/account/business/entities/businesslogicelements/BreachedSet.java
  visible: true
  text: |
    package account.business.entities.businesslogicelements;

    import org.springframework.stereotype.Component;

    import java.util.Arrays;
    import java.util.HashSet;
    import java.util.Set;

    @Component
    public class BreachedSet {

        private Set<String> breachedSet = new HashSet<>(Arrays.asList("PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch", "PasswordForApril",
                "PasswordForMay", "PasswordForJune", "PasswordForJuly", "PasswordForAugust",
                "PasswordForSeptember", "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"));

        public boolean contains(String s) {
            for (String unit : breachedSet) {
                if (unit.equals(s)) {
                    return true;
                }
            }
            return false;
        }
    }
  learner_created: true
- name: src/account/business/entities/dto/ChangepassDTO.java
  visible: true
  text: |
    package account.business.entities.dto;

    import lombok.AllArgsConstructor;
    import lombok.Data;

    @Data
    @AllArgsConstructor
    public class ChangepassDTO {
        private String email;
        private String status;
    }
  learner_created: true
- name: src/account/persistence/SalaryUnitRepository.java
  visible: true
  text: |
    package account.persistence;

    import account.business.entities.dbentities.SalaryUnit;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    import java.util.Date;
    import java.util.List;
    import java.util.Optional;

    @Repository
    public interface SalaryUnitRepository extends CrudRepository<SalaryUnit, Long> {
        SalaryUnit save(SalaryUnit salaryUnit);
        List<SalaryUnit> findAllByUser_idOrderByPeriodDesc(long id);
        Optional<SalaryUnit> findFirstByUser_idAndPeriodOrderByPeriodDesc(long user_id, Date period);
        void delete(SalaryUnit salaryUnit);
    }
  learner_created: true
- name: src/account/business/businesslogicunits/DateHandler.java
  visible: true
  text: |
    package account.business.businesslogicunits;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.server.ResponseStatusException;

    import java.text.ParseException;
    import java.text.SimpleDateFormat;
    import java.util.Calendar;
    import java.util.Date;
    import java.util.Locale;

    public class DateHandler {

        private static final String PATTERN = "mm-YYYY";

        public static Date toDate(String stringDate) {
            SimpleDateFormat format = new SimpleDateFormat("MM-yyyy");
            format.setLenient(false);
            Date javaDate;
            try {
                 javaDate = format.parse(stringDate);
            }
            catch (ParseException e) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Incorrect date");
            }
            return javaDate;
        }

        public static String parseString(Date date) {
            Calendar cal = Calendar.getInstance();
            cal.setTime(date);
            String month = cal.getDisplayName(Calendar.MONTH, Calendar.LONG, Locale.US);
            int year = cal.get(Calendar.YEAR);
            return month + "-" + year;
        }
    }
  learner_created: true
- name: src/account/business/entities/dto/StatusResponseDTO.java
  visible: true
  text: |
    package account.business.entities.dto;

    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public class StatusResponseDTO {
        private String status;
    }
  learner_created: true
- name: src/account/business/entities/dbentities/SalaryUnit.java
  visible: true
  text: |
    package account.business.entities.dbentities;

    import account.business.entities.dto.SalaryUnitDTO;
    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import javax.persistence.*;
    import javax.validation.constraints.NotNull;
    import java.util.Date;

    @Data
    @Entity
    @NoArgsConstructor
    @AllArgsConstructor
    @Table(uniqueConstraints = { @UniqueConstraint(columnNames = {"user_id", "period"}) })
    public class SalaryUnit {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        private long id;

        @NotNull
        @JsonIgnore
        @Column(columnDefinition = "DATE")
        private Date period;

        @NotNull
        private long salary;

        @JsonIgnore
        @ManyToOne
        @JoinColumn(name = "user_id")
        private User user;

        public SalaryUnit(long salary, User user, Date period) {
            this.period = period;
            this.salary = salary;
            this.user = user;
        }
    }
  learner_created: true
- name: src/account/config/DataLoader.java
  visible: true
  learner_created: true
- name: src/account/persistence/GroupRepository.java
  visible: true
  learner_created: true
- name: src/account/business/entities/dbentities/Group.java
  visible: true
  learner_created: true
- name: src/account/business/entities/dto/RoleOperationDTO.java
  visible: true
  learner_created: true
- name: src/account/business/entities/businesslogicelements/enums/Roles.java
  visible: true
  learner_created: true
- name: src/account/business/entities/businesslogicelements/enums/RoleOperations.java
  visible: true
  learner_created: true
- name: src/account/config/exceptions/badrequestexceptions/BadRequestExceptionThrower.java
  visible: true
  learner_created: true
- name: src/account/config/exceptions/internalservererrorexceptions/InternalServerErrorExceptionThrower.java
  visible: true
  learner_created: true
- name: src/account/config/exceptions/ExceptionThrower.java
  visible: true
  learner_created: true
- name: src/account/config/exceptions/notfoundexceptions/NotFoundExceptionThrower.java
  visible: true
  learner_created: true
- name: src/account/config/exceptions/unauthorizedexceptions/UnauthorizedExceptionThrower.java
  visible: true
  learner_created: true
- name: src/account/business/entities/dto/UserDTO.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/217/stages/1090/implement#comment
status: Failed
feedback:
  message: "Unexpected error in test #32\n\nWe have recorded this bug and will fix\
    \ it soon.\n\nSubmitted via IDE\n\nOS Windows 10\nJava 11.0.10\nVendor Oracle\
    \ Corporation\nTesting library version 8.2\n\norg.hyperskill.hstest.exception.outcomes.UnexpectedError\r\
    \n\tat org.hyperskill.hstest.stage.SpringTest.reloadSpring(SpringTest.java:175)\r\
    \n\tat AccountServiceTest.restartApplication(AccountServiceTest.java:330)\r\n\t\
    at AccountServiceTest.lambda$new$32(AccountServiceTest.java:765)\r\n\tat org.hyperskill.hstest.dynamic.input.DynamicTesting.lambda$null$2(DynamicTesting.java:289)\r\
    \n\tat org.hyperskill.hstest.dynamic.input.DynamicTesting$1DynamicTestElement.lambda$null$0(DynamicTesting.java:252)\r\
    \n\tat org.hyperskill.hstest.testing.runner.SpringApplicationRunner.test(SpringApplicationRunner.java:43)\r\
    \n\tat org.hyperskill.hstest.testing.TestRun.test(TestRun.java:87)\r\n\tat org.hyperskill.hstest.stage.StageTest.start(StageTest.java:116)\r\
    \n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\
    \n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\
    \n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\r\
    \n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\
    \n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\r\
    \n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\
    \n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\
    \n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\r\n\t\
    at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)\r\
    \n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)\r\
    \n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)\r\
    \n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\r\
    \n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\r\n\t\
    at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\r\
    \n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\r\n\t\
    at org.junit.runners.ParentRunner.run(ParentRunner.java:413)\r\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)\r\
    \n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)\r\
    \n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)\r\
    \n\tat org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)\r\
    \n\tat org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)\r\
    \n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\
    \n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\
    \n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\r\
    \n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\r\
    \n\tat org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)\r\
    \n\tat org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)\r\
    \n\tat com.sun.proxy.$Proxy2.processTestClass(Unknown Source)\r\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:119)\r\
    \n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\
    \n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\
    \n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\r\
    \n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\r\
    \n\tat org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:182)\r\
    \n\tat org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:164)\r\
    \n\tat org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:414)\r\
    \n\tat org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)\r\
    \n\tat org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:48)\r\
    \n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\
    \n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\
    \n\tat org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:56)\r\
    \n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\nCaused by: java.lang.reflect.InvocationTargetException\r\
    \n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\
    \n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\
    \n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.hyperskill.hstest.stage.SpringTest.startSpring(SpringTest.java:139)\r\
    \n\tat org.hyperskill.hstest.stage.SpringTest.reloadSpring(SpringTest.java:173)\r\
    \n\t... 58 more\r\nCaused by: org.springframework.beans.factory.UnsatisfiedDependencyException:\
    \ Error creating bean with name &#39;accountServiceApplication&#39;: Unsatisfied\
    \ dependency expressed through field &#39;dataLoader&#39;; nested exception is\
    \ org.springframework.beans.factory.BeanCreationException: Error creating bean\
    \ with name &#39;dataLoader&#39; defined in file [C:\\Users\\1\\IdeaProjects\\\
    Account Service\\Account Service\\task\\build\\classes\\java\\main\\account\\\
    config\\DataLoader.class]: Bean instantiation via constructor failed; nested exception\
    \ is org.springframework.beans.BeanInstantiationException: Failed to instantiate\
    \ [account.config.DataLoader]: Constructor threw exception; nested exception is\
    \ org.springframework.web.server.ResponseStatusException: 500 INTERNAL_SERVER_ERROR\
    \ &quot;Role creating problem&quot;\r\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)\r\
    \n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)\r\
    \n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)\r\
    \n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)\r\
    \n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)\r\
    \n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)\r\
    \n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)\r\
    \n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)\r\
    \n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)\r\
    \n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)\r\
    \n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:893)\r\
    \n\tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)\r\
    \n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)\r\
    \n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:143)\r\
    \n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)\r\
    \n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)\r\
    \n\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)\r\
    \n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:315)\r\
    \n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)\r\
    \n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)\r\
    \n\tat account.AccountServiceApplication.main(AccountServiceApplication.java:14)\r\
    \n\t... 64 more\r\nCaused by: org.springframework.beans.factory.BeanCreationException:\
    \ Error creating bean with name &#39;dataLoader&#39; defined in file [C:\\Users\\\
    1\\IdeaProjects\\Account Service\\Account Service\\task\\build\\classes\\java\\\
    main\\account\\config\\DataLoader.class]: Bean instantiation via constructor failed;\
    \ nested exception is org.springframework.beans.BeanInstantiationException: Failed\
    \ to instantiate [account.config.DataLoader]: Constructor threw exception; nested\
    \ exception is org.springframework.web.server.ResponseStatusException: 500 INTERNAL_SERVER_ERROR\
    \ &quot;Role creating problem&quot;\r\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:313)\r\
    \n\tat org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:294)\r\
    \n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1358)\r\
    \n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1204)\r\
    \n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)\r\
    \n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)\r\
    \n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)\r\
    \n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)\r\
    \n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)\r\
    \n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)\r\
    \n\tat org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)\r\
    \n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1304)\r\
    \n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1224)\r\
    \n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)\r\
    \n\t... 84 more\r\nCaused by: org.springframework.beans.BeanInstantiationException:\
    \ Failed to instantiate [account.config.DataLoader]: Constructor threw exception;\
    \ nested exception is org.springframework.web.server.ResponseStatusException:\
    \ 500 INTERNAL_SERVER_ERROR &quot;Role creating problem&quot;\r\n\tat org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:217)\r\
    \n\tat org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:117)\r\
    \n\tat org.springframework.beans.factory.support.ConstructorResolver.lambda$instantiate$0(ConstructorResolver.java:305)\r\
    \n\tat java.base/java.security.AccessController.doPrivileged(Native Method)\r\n\
    \tat org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:304)\r\
    \n\t... 97 more\r\nCaused by: org.springframework.web.server.ResponseStatusException:\
    \ 500 INTERNAL_SERVER_ERROR &quot;Role creating problem&quot;\r\n\tat account.config.DataLoader.createRoles(DataLoader.java:28)\r\
    \n\tat account.config.DataLoader.&lt;init&gt;(DataLoader.java:19)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native\
    \ Method)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\
    \n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\
    \n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\
    \n\tat org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:204)\r\
    \n\t... 101 more\r\n\njava.lang.reflect.InvocationTargetException\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\
    \n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\
    \n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.hyperskill.hstest.stage.SpringTest.startSpring(SpringTest.java:139)\r\
    \n\tat org.hyperskill.hstest.stage.SpringTest.reloadSpring(SpringTest.java:173)\r\
    \n\tat AccountServiceTest.restartApplication(AccountServiceTest.java:330)\r\n\t\
    at AccountServiceTest.lambda$new$32(AccountServiceTest.java:765)\r\n\tat org.hyperskill.hstest.dynamic.input.DynamicTesting.lambda$null$2(DynamicTesting.java:289)\r\
    \n\tat org.hyperskill.hstest.dynamic.input.DynamicTesting$1DynamicTestElement.lambda$null$0(DynamicTesting.java:252)\r\
    \n\tat org.hyperskill.hstest.testing.runner.SpringApplicationRunner.test(SpringApplicationRunner.java:43)\r\
    \n\tat org.hyperskill.hstest.testing.TestRun.test(TestRun.java:87)\r\n\tat org.hyperskill.hstest.stage.StageTest.start(StageTest.java:116)\r\
    \n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\
    \n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\
    \n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\r\
    \n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\
    \n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\r\
    \n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\
    \n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\
    \n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\r\n\t\
    at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)\r\
    \n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)\r\
    \n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)\r\
    \n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\r\
    \n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\r\n\t\
    at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\r\
    \n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\r\n\t\
    at org.junit.runners.ParentRunner.run(ParentRunner.java:413)\r\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)\r\
    \n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)\r\
    \n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)\r\
    \n\tat org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)\r\
    \n\tat org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)\r\
    \n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\
    \n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\
    \n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\r\
    \n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\r\
    \n\tat org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)\r\
    \n\tat org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)\r\
    \n\tat com.sun.proxy.$Proxy2.processTestClass(Unknown Source)\r\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:119)\r\
    \n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\
    \n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\
    \n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\r\
    \n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\r\
    \n\tat org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:182)\r\
    \n\tat org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:164)\r\
    \n\tat org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:414)\r\
    \n\tat org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)\r\
    \n\tat org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:48)\r\
    \n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\
    \n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\
    \n\tat org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:56)\r\
    \n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\nCaused by: org.springframework.beans.factory.UnsatisfiedDependencyException:\
    \ Error creating bean with name &#39;accountServiceApplication&#39;: Unsatisfied\
    \ dependency expressed through field &#39;dataLoader&#39;; nested exception is\
    \ org.springframework.beans.factory.BeanCreationException: Error creating bean\
    \ with name &#39;dataLoader&#39; defined in file [C:\\Users\\1\\IdeaProjects\\\
    Account Service\\Account Service\\task\\build\\classes\\java\\main\\account\\\
    config\\DataLoader.class]: Bean instantiation via constructor failed; nested exception\
    \ is org.springframework.beans.BeanInstantiationException: Failed to instantiate\
    \ [account.config.DataLoader]: Constructor threw exception; nested exception is\
    \ org.springframework.web.server.ResponseStatusException: 500 INTERNAL_SERVER_ERROR\
    \ &quot;Role creating problem&quot;\r\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)\r\
    \n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)\r\
    \n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)\r\
    \n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)\r\
    \n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)\r\
    \n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)\r\
    \n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)\r\
    \n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)\r\
    \n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)\r\
    \n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)\r\
    \n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:893)\r\
    \n\tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)\r\
    \n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)\r\
    \n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:143)\r\
    \n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)\r\
    \n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)\r\
    \n\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)\r\
    \n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:315)\r\
    \n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)\r\
    \n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)\r\
    \n\tat account.AccountServiceApplication.main(AccountServiceApplication.java:14)\r\
    \n\t... 64 more\r\nCaused by: org.springframework.beans.factory.BeanCreationException:\
    \ Error creating bean with name &#39;dataLoader&#39; defined in file [C:\\Users\\\
    1\\IdeaProjects\\Account Service\\Account Service\\task\\build\\classes\\java\\\
    main\\account\\config\\DataLoader.class]: Bean instantiation via constructor failed;\
    \ nested exception is org.springframework.beans.BeanInstantiationException: Failed\
    \ to instantiate [account.config.DataLoader]: Constructor threw exception; nested\
    \ exception is org.springframework.web.server.ResponseStatusException: 500 INTERNAL_SERVER_ERROR\
    \ &quot;Role creating problem&quot;\r\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:313)\r\
    \n\tat org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:294)\r\
    \n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1358)\r\
    \n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1204)\r\
    \n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)\r\
    \n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)\r\
    \n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)\r\
    \n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)\r\
    \n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)\r\
    \n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)\r\
    \n\tat org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)\r\
    \n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1304)\r\
    \n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1224)\r\
    \n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)\r\
    \n\t... 84 more\r\nCaused by: org.springframework.beans.BeanInstantiationException:\
    \ Failed to instantiate [account.config.DataLoader]: Constructor threw exception;\
    \ nested exception is org.springframework.web.server.ResponseStatusException:\
    \ 500 INTERNAL_SERVER_ERROR &quot;Role creating problem&quot;\r\n\tat org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:217)\r\
    \n\tat org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:117)\r\
    \n\tat org.springframework.beans.factory.support.ConstructorResolver.lambda$instantiate$0(ConstructorResolver.java:305)\r\
    \n\tat java.base/java.security.AccessController.doPrivileged(Native Method)\r\n\
    \tat org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:304)\r\
    \n\t... 97 more\r\nCaused by: org.springframework.web.server.ResponseStatusException:\
    \ 500 INTERNAL_SERVER_ERROR &quot;Role creating problem&quot;\r\n\tat account.config.DataLoader.createRoles(DataLoader.java:28)\r\
    \n\tat account.config.DataLoader.&lt;init&gt;(DataLoader.java:19)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native\
    \ Method)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\
    \n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\
    \n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\
    \n\tat org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:204)\r\
    \n\t... 101 more\n\nPlease find below the output of your program during this failed\
    \ test.\n\n---\n\n.   ____          _            __ _ _\n /\\\\ / ___&#39;_ __\
    \ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | &#39;_ | &#39;_| | &#39;_ \\/ _`\
    \ | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  &#39;  |____|\
    \ .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n ::\
    \ Spring Boot ::        (v2.3.1.RELEASE)\n\n2022-02-13 12:57:34.018  INFO 22712\
    \ --- [    Test worker] account.AccountServiceApplication        : Starting AccountServiceApplication\
    \ on LAPTOP-75BR11H8 with PID 22712 (started by 1 in C:\\Users\\1\\IdeaProjects\\\
    Account Service\\Account Service\\task)\n2022-02-13 12:57:34.028  INFO 22712 ---\
    \ [    Test worker] account.AccountServiceApplication        : No active profile\
    \ set, falling back to default profiles: default\n2022-02-13 12:57:37.384  INFO\
    \ 22712 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping\
    \ Spring Data JPA repositories in DEFERRED mode.\n2022-02-13 12:57:37.643  INFO\
    \ 22712 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished\
    \ Spring Data repository scanning in 234ms. Found 3 JPA repository interfaces.\n\
    2022-02-13 12:57:39.565  INFO 22712 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer\
    \  : Tomcat initialized with port(s): 28852 (http)\n2022-02-13 12:57:39.598  INFO\
    \ 22712 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting\
    \ service [Tomcat]\n2022-02-13 12:57:39.600  INFO 22712 --- [    Test worker]\
    \ org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache\
    \ Tomcat/9.0.36]\n2022-02-13 12:57:40.014  INFO 22712 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]\
    \       : Initializing Spring embedded WebApplicationContext\n2022-02-13 12:57:40.015\
    \  INFO 22712 --- [    Test worker] w.s.c.ServletWebServerApplicationContext :\
    \ Root WebApplicationContext: initialization completed in 5806 ms\n2022-02-13\
    \ 12:57:40.849  INFO 22712 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor\
    \  : Initializing ExecutorService &#39;applicationTaskExecutor&#39;\n2022-02-13\
    \ 12:57:41.101  INFO 22712 --- [         task-1] o.hibernate.jpa.internal.util.LogHelper\
    \  : HHH000204: Processing PersistenceUnitInfo [name: default]\n2022-02-13 12:57:41.419\
    \  INFO 22712 --- [         task-1] org.hibernate.Version                    :\
    \ HHH000412: Hibernate ORM core version 5.4.17.Final\n2022-02-13 12:57:42.007\
    \  INFO 22712 --- [         task-1] o.hibernate.annotations.common.Version   :\
    \ HCANN000001: Hibernate Commons Annotations {5.1.0.Final}\n2022-02-13 12:57:42.346\
    \  INFO 22712 --- [         task-1] com.zaxxer.hikari.HikariDataSource       :\
    \ HikariPool-1 - Starting...\n2022-02-13 12:57:42.918  INFO 22712 --- [      \
    \   task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.\n\
    2022-02-13 12:57:43.049  INFO 22712 --- [         task-1] org.hibernate.dialect.Dialect\
    \            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect\n2022-02-13\
    \ 12:57:45.710  INFO 22712 --- [         task-1] o.h.e.t.j.p.i.JtaPlatformInitiator\
    \       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]\n\
    2022-02-13 12:57:45.731  INFO 22712 --- [         task-1] j.LocalContainerEntityManagerFactoryBean\
    \ : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;\n\
    2022-02-13 12:57:46.943  WARN 22712 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration\
    \ : spring.jpa.open-in-view is enabled by default. Therefore, database queries\
    \ may be performed during view rendering. Explicitly configure spring.jpa.open-in-view\
    \ to disable this warning\n2022-02-13 12:57:48.190  INFO 22712 --- [    Test worker]\
    \ o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base\
    \ path &#39;/actuator&#39;\n2022-02-13 12:57:48.353  INFO 22712 --- [    Test\
    \ worker] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any\
    \ request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@30e5627e,\
    \ org.springframework.security.web.context.SecurityContextPersistenceFilter@2be807a1,\
    \ org.springframework.security.web.header.HeaderWriterFilter@1d0484a1, org.springframework.security.web.authentication.logout.LogoutFilter@d062986,\
    \ org.springframework.security.web.authentication.www.BasicAuthenticationFilter@6a565ca1,\
    \ org.springframework.security.web.savedrequest.RequestCacheAwareFilter@31fef638,\
    \ org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2c5de8bb,\
    \ org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7f322cbb,\
    \ org.springframework.security.web.session.SessionManagementFilter@28543dca, org.springframework.security.web.access.ExceptionTranslationFilter@1d0d19ea,\
    \ org.springframework.security.web.access.intercept.FilterSecurityInterceptor@18d96a63]\n\
    2022-02-13 12:57:48.960  INFO 22712 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer\
    \  : Tomcat started on port(s): 28852 (http) with context path &#39;&#39;\n2022-02-13\
    \ 12:57:48.962  INFO 22712 --- [    Test worker] DeferredRepositoryInitializationListener\
    \ : Triggering deferred initialization of Spring Data repositories…\n2022-02-13\
    \ 12:57:49.079  INFO 22712 --- [    Test worker] DeferredRepositoryInitializationListener\
    \ : Spring Data repositories initialized!\n2022-02-13 12:57:49.115  INFO 22712\
    \ --- [    Test worker] account.AccountServiceApplication        : Started AccountServiceApplication\
    \ in 16.486 seconds (JVM running for 19.634)\n2022-02-13 12:57:50.087  INFO 22712\
    \ --- [io-28852-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing\
    \ Spring DispatcherServlet &#39;dispatcherServlet&#39;\n2022-02-13 12:57:50.090\
    \  INFO 22712 --- [io-28852-exec-2] o.s.web.servlet.DispatcherServlet        :\
    \ Initializing Servlet &#39;dispatcherServlet&#39;\n2022-02-13 12:57:50.111  INFO\
    \ 22712 --- [io-28852-exec-2] o.s.web.servlet.DispatcherServlet        : Completed\
    \ initialization in 19 ms\n2022-02-13 12:57:50.523  WARN 22712 --- [io-28852-exec-2]\
    \ .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException:\
    \ Validation failed for argument [0] in public account.business.entities.dto.UserDTO\
    \ account.presentation.AuthController.register(account.business.entities.dbentities.User):\
    \ [Field error in object &#39;user&#39; on field &#39;name&#39;: rejected value\
    \ []; codes [NotBlank.user.name,NotBlank.name,NotBlank.java.lang.String,NotBlank];\
    \ arguments [org.springframework.context.support.DefaultMessageSourceResolvable:\
    \ codes [user.name,name]; arguments []; default message [name]]; default message\
    \ [Name is required]] ]\n2022-02-13 12:57:50.649  WARN 22712 --- [io-28852-exec-1]\
    \ .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException:\
    \ Validation failed for argument [0] in public account.business.entities.dto.UserDTO\
    \ account.presentation.AuthController.register(account.business.entities.dbentities.User):\
    \ [Field error in object &#39;user&#39; on field &#39;name&#39;: rejected value\
    \ [null]; codes [NotBlank.user.name,NotBlank.name,NotBlank.java.lang.String,NotBlank];\
    \ arguments [org.springframework.context.support.DefaultMessageSourceResolvable:\
    \ codes [user.name,name]; arguments []; default message [name]]; default message\
    \ [Name is required]] ]\n2022-02-13 12:57:50.687  WARN 22712 --- [io-28852-exec-3]\
    \ .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException:\
    \ Validation failed for argument [0] in public account.business.entities.dto.UserDTO\
    \ account.presentation.AuthController.register(account.business.entities.dbentities.User):\
    \ [Field error in object &#39;user&#39; on field &#39;lastname&#39;: rejected\
    \ value []; codes [NotBlank.user.lastname,NotBlank.lastname,NotBlank.java.lang.String,NotBlank];\
    \ arguments [org.springframework.context.support.DefaultMessageSourceResolvable:\
    \ codes [user.lastname,lastname]; arguments []; default message [lastname]]; default\
    \ message [Lastname is required]] ]\n2022-02-13 12:57:50.735  WARN 22712 --- [io-28852-exec-4]\
    \ .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException:\
    \ Validation failed for argument [0] in public account.business.entities.dto.UserDTO\
    \ account.presentation.AuthController.register(account.business.entities.dbentities.User):\
    \ [Field error in object &#39;user&#39; on field &#39;lastname&#39;: rejected\
    \ value [null]; codes [NotBlank.user.lastname,NotBlank.lastname,NotBlank.java.lang.String,NotBlank];\
    \ arguments [org.springframework.context.support.DefaultMessageSourceResolvable:\
    \ codes [user.lastname,lastname]; arguments []; default message [lastname]]; default\
    \ message [Lastname is required]] ]\n2022-02-13 12:57:50.771  WARN 22712 --- [io-28852-exec-6]\
    \ .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException:\
    \ Validation failed for argument [0] in public account.business.entities.dto.UserDTO\
    \ account.presentation.AuthController.register(account.business.entities.dbentities.User)\
    \ with 2 errors: [Field error in object &#39;user&#39; on field &#39;email&#39;:\
    \ rejected value []; codes [NotBlank.user.email,NotBlank.email,NotBlank.java.lang.String,NotBlank];\
    \ arguments [org.springframework.context.support.DefaultMessageSourceResolvable:\
    \ codes [user.email,email]; arguments []; default message [email]]; default message\
    \ [Email is required]] [Field error in object &#39;user&#39; on field &#39;email&#39;:\
    \ rejected value []; codes [Pattern.user.email,Pattern.email,Pattern.java.lang.String,Pattern];\
    \ arguments [org.springframework.context.support.DefaultMessageSourceResolvable:\
    \ codes [user.email,email]; arguments []; default message [email],[Ljavax.validation.constraints.Pattern$Flag;@e399454,[a-zA-z0-9]+@acme\\\
    .com]; default message [Domain should be @acme.com]] ]\n2022-02-13 12:57:50.811\
    \  WARN 22712 --- [io-28852-exec-7] .w.s.m.s.DefaultHandlerExceptionResolver :\
    \ Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation\
    \ failed for argument [0] in public account.business.entities.dto.UserDTO account.presentation.AuthController.register(account.business.entities.dbentities.User):\
    \ [Field error in object &#39;user&#39; on field &#39;email&#39;: rejected value\
    \ [null]; codes [NotBlank.user.email,NotBlank.email,NotBlank.java.lang.String,NotBlank];\
    \ arguments [org.springframework.context.support.DefaultMessageSourceResolvable:\
    \ codes [user.email,email]; arguments []; default message [email]]; default message\
    \ [Email is required]] ]\n2022-02-13 12:57:50.840  WARN 22712 --- [io-28852-exec-5]\
    \ .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException:\
    \ Validation failed for argument [0] in public account.business.entities.dto.UserDTO\
    \ account.presentation.AuthController.register(account.business.entities.dbentities.User):\
    \ [Field error in object &#39;user&#39; on field &#39;password&#39;: rejected\
    \ value []; codes [NotBlank.user.password,NotBlank.password,NotBlank.java.lang.String,NotBlank];\
    \ arguments [org.springframework.context.support.DefaultMessageSourceResolvable:\
    \ codes [user.password,password]; arguments []; default message [password]]; default\
    \ message [Password is required]] ]\n2022-02-13 12:57:50.873  WARN 22712 --- [io-28852-exec-9]\
    \ .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException:\
    \ Validation failed for argument [0] in public account.business.entities.dto.UserDTO\
    \ account.presentation.AuthController.register(account.business.entities.dbentities.User):\
    \ [Field error in object &#39;user&#39; on field &#39;password&#39;: rejected\
    \ value [null]; codes [NotBlank.user.password,NotBlank.password,NotBlank.java.lang.String,NotBlank];\
    \ arguments [org.springframework.context.support.DefaultMessageSourceResolvable:\
    \ codes [user.password,password]; arguments []; default message [password]]; default\
    \ message [Password is required]] ]\n2022-02-13 12:57:50.973  WARN 22712 --- [io-28852-exec-8]\
    \ .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException:\
    \ Validation failed for argument [0] in public account.business.entities.dto.UserDTO\
    \ account.presentation.AuthController.register(account.business.entities.dbentities.User)\
    \ with 2 errors: [Field error in object &#39;user&#39; on field &#39;email&#39;:\
    \ rejected value [johndoeacme.com]; codes [Pattern.user.email,Pattern.email,Pattern.java.lang.String,Pattern];\
    \ arguments [org.springframework.context.support.DefaultMessageSourceResolvable:\
    \ codes [user.email,email]; arguments []; default message [email],[Ljavax.validation.constraints.Pattern$Flag;@e399454,[a-zA-z0-9]+@acme\\\
    .com]; default message [Domain should be @acme.com]] [Field error in object &#39;user&#39;\
    \ on field &#39;email&#39;: rejected value [johndoeacme.com]; codes [Email.user.email,Email.email,Email.java.lang.String,Email];\
    \ arguments [org.springframework.context.support.DefaultMessageSourceResolvable:\
    \ codes [user.email,email]; arguments []; default message [email],[Ljavax.validation.constraints.Pattern$Flag;@35684880,.*];\
    \ default message [must be a well-formed email address]] ]\n2022-02-13 12:57:51.006\
    \  WARN 22712 --- [o-28852-exec-10] .w.s.m.s.DefaultHandlerExceptionResolver :\
    \ Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation\
    \ failed for argument [0] in public account.business.entities.dto.UserDTO account.presentation.AuthController.register(account.business.entities.dbentities.User):\
    \ [Field error in object &#39;user&#39; on field &#39;email&#39;: rejected value\
    \ [johndoe@google.com]; codes [Pattern.user.email,Pattern.email,Pattern.java.lang.String,Pattern];\
    \ arguments [org.springframework.context.support.DefaultMessageSourceResolvable:\
    \ codes [user.email,email]; arguments []; default message [email],[Ljavax.validation.constraints.Pattern$Flag;@e399454,[a-zA-z0-9]+@acme\\\
    .com]; default message [Domain should be @acme.com]] ]\n2022-02-13 12:58:43.772\
    \  INFO 22712 --- [     Thread-335] j.LocalContainerEntityManagerFactoryBean :\
    \ Closing JPA EntityManagerFactory for persistence unit &#39;default&#39;\n2022-02-13\
    \ 12:58:43.780  INFO 22712 --- [     Thread-335] o.s.s.concurrent.ThreadPoolTaskExecutor\
    \  : Shutting down ExecutorService &#39;applicationTaskExecutor&#39;\n2022-02-13\
    \ 12:58:43.784  INFO 22712 --- [     Thread-335] com.zaxxer.hikari.HikariDataSource\
    \       : HikariPool-1 - Shutdown initiated...\n2022-02-13 12:58:44.065  INFO\
    \ 22712 --- [     Thread-335] com.zaxxer.hikari.HikariDataSource       : HikariPool-1\
    \ - Shutdown completed.\n\n  .   ____          _            __ _ _\n /\\\\ / ___&#39;_\
    \ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | &#39;_ | &#39;_| | &#39;_ \\/\
    \ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  &#39;  |____|\
    \ .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n ::\
    \ Spring Boot ::        (v2.3.1.RELEASE)\n\n2022-02-13 12:58:44.271  INFO 22712\
    \ --- [    Test worker] account.AccountServiceApplication        : Starting AccountServiceApplication\
    \ on LAPTOP-75BR11H8 with PID 22712 (started by 1 in C:\\Users\\1\\IdeaProjects\\\
    Account Service\\Account Service\\task)\n2022-02-13 12:58:44.272  INFO 22712 ---\
    \ [    Test worker] account.AccountServiceApplication        : No active profile\
    \ set, falling back to default profiles: default\n2022-02-13 12:58:45.490  INFO\
    \ 22712 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping\
    \ Spring Data JPA repositories in DEFERRED mode.\n2022-02-13 12:58:45.566  INFO\
    \ 22712 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished\
    \ Spring Data repository scanning in 74ms. Found 3 JPA repository interfaces.\n\
    2022-02-13 12:58:45.846  INFO 22712 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer\
    \  : Tomcat initialized with port(s): 28852 (http)\n2022-02-13 12:58:45.848  INFO\
    \ 22712 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting\
    \ service [Tomcat]\n2022-02-13 12:58:45.849  INFO 22712 --- [    Test worker]\
    \ org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache\
    \ Tomcat/9.0.36]\n2022-02-13 12:58:45.944  INFO 22712 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]\
    \       : Initializing Spring embedded WebApplicationContext\n2022-02-13 12:58:45.945\
    \  INFO 22712 --- [    Test worker] w.s.c.ServletWebServerApplicationContext :\
    \ Root WebApplicationContext: initialization completed in 1635 ms\n2022-02-13\
    \ 12:58:46.186  INFO 22712 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor\
    \  : Initializing ExecutorService &#39;applicationTaskExecutor&#39;\n2022-02-13\
    \ 12:58:46.218  INFO 22712 --- [         task-1] o.hibernate.jpa.internal.util.LogHelper\
    \  : HHH000204: Processing PersistenceUnitInfo [name: default]\n2022-02-13 12:58:46.246\
    \  INFO 22712 --- [         task-1] com.zaxxer.hikari.HikariDataSource       :\
    \ HikariPool-2 - Starting...\n2022-02-13 12:58:46.308  INFO 22712 --- [      \
    \   task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Start completed.\n\
    2022-02-13 12:58:46.312  INFO 22712 --- [         task-1] org.hibernate.dialect.Dialect\
    \            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect\n2022-02-13\
    \ 12:58:46.714  INFO 22712 --- [         task-1] o.h.e.t.j.p.i.JtaPlatformInitiator\
    \       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]\n\
    2022-02-13 12:58:46.716  INFO 22712 --- [         task-1] j.LocalContainerEntityManagerFactoryBean\
    \ : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;\n\
    2022-02-13 12:58:46.777  WARN 22712 --- [    Test worker] o.h.engine.jdbc.spi.SqlExceptionHelper\
    \   : SQL Error: 23505, SQLState: 23505\n2022-02-13 12:58:46.778 ERROR 22712 ---\
    \ [    Test worker] o.h.engine.jdbc.spi.SqlExceptionHelper   : Unique index or\
    \ primary key violation: &quot;PUBLIC.UK_5978CXF729TP2L1WEDSNJY7CC_INDEX_4 ON\
    \ PUBLIC.PRINCIPLE_GROUPS(NAME) VALUES 1&quot;; SQL statement:\ninsert into principle_groups\
    \ (name, id) values (?, ?) [23505-200]\n2022-02-13 12:58:46.793  WARN 22712 ---\
    \ [    Test worker] ConfigServletWebServerApplicationContext : Exception encountered\
    \ during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException:\
    \ Error creating bean with name &#39;accountServiceApplication&#39;: Unsatisfied\
    \ dependency expressed through field &#39;dataLoader&#39;; nested exception is\
    \ org.springframework.beans.factory.BeanCreationException: Error creating bean\
    \ with name &#39;dataLoader&#39; defined in file [C:\\Users\\1\\IdeaProjects\\\
    Account Service\\Account Service\\task\\build\\classes\\java\\main\\account\\\
    config\\DataLoader.class]: Bean instantiation via constructor failed; nested exception\
    \ is org.springframework.beans.BeanInstantiationException: Failed to instantiate\
    \ [account.config.DataLoader]: Constructor threw exception; nested exception is\
    \ org.springframework.web.server.ResponseStatusException: 500 INTERNAL_SERVER_ERROR\
    \ &quot;Role creating problem&quot;\n2022-02-13 12:58:46.798  INFO 22712 --- [\
    \    Test worker] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory\
    \ for persistence unit &#39;default&#39;\n2022-02-13 12:58:46.799  INFO 22712\
    \ --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down\
    \ ExecutorService &#39;applicationTaskExecutor&#39;\n2022-02-13 12:58:46.800 \
    \ INFO 22712 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       :\
    \ HikariPool-2 - Shutdown initiated...\n2022-02-13 12:58:47.117  INFO 22712 ---\
    \ [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 -\
    \ Shutdown completed.\n2022-02-13 12:58:47.118  INFO 22712 --- [    Test worker]\
    \ o.apache.catalina.core.StandardService   : Stopping service [Tomcat]\n2022-02-13\
    \ 12:58:47.135  INFO 22712 --- [    Test worker] ConditionEvaluationReportLoggingListener\
    \ : \n\nError starting ApplicationContext. To display the conditions report re-run\
    \ your application with &#39;debug&#39; enabled.\n2022-02-13 12:58:47.168 ERROR\
    \ 22712 --- [    Test worker] o.s.boot.SpringApplication               : Application\
    \ run failed\n\norg.springframework.beans.factory.UnsatisfiedDependencyException:\
    \ Error creating bean with name &#39;accountServiceApplication&#39;: Unsatisfied\
    \ dependency expressed through field &#39;dataLoader&#39;; nested exception is\
    \ org.springframework.beans.factory.BeanCreationException: Error creating bean\
    \ with name &#39;dataLoader&#39; defined in file [C:\\Users\\1\\IdeaProjects\\\
    Account Service\\Account Service\\task\\build\\classes\\java\\main\\account\\\
    config\\DataLoader.class]: Bean instantiation via constructor failed; nested exception\
    \ is org.springframework.beans.BeanInstantiationException: Failed to instantiate\
    \ [account.config.DataLoader]: Constructor threw exception; nested exception is\
    \ org.springframework.web.server.ResponseStatusException: 500 INTERNAL_SERVER_ERROR\
    \ &quot;Role creating problem&quot;\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:893)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)\
    \ ~[spring-context-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)\
    \ ~[spring-context-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:143)\
    \ ~[spring-boot-2.3.1.RELEASE.jar:2.3.1.RELEASE]\n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)\
    \ ~[spring-boot-2.3.1.RELEASE.jar:2.3.1.RELEASE]\n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)\
    \ ~[spring-boot-2.3.1.RELEASE.jar:2.3.1.RELEASE]\n\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)\
    \ ~[spring-boot-2.3.1.RELEASE.jar:2.3.1.RELEASE]\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:315)\
    \ ~[spring-boot-2.3.1.RELEASE.jar:2.3.1.RELEASE]\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)\
    \ ~[spring-boot-2.3.1.RELEASE.jar:2.3.1.RELEASE]\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)\
    \ ~[spring-boot-2.3.1.RELEASE.jar:2.3.1.RELEASE]\n\tat account.AccountServiceApplication.main(AccountServiceApplication.java:14)\
    \ ~[main/:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method) ~[na:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\
    \ ~[na:na]\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\
    \ ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]\n\
    \tat org.hyperskill.hstest.stage.SpringTest.startSpring(SpringTest.java:139) ~[hs-test-release-SNAPSHOT.jar:na]\n\
    \tat org.hyperskill.hstest.stage.SpringTest.reloadSpring(SpringTest.java:173)\
    \ ~[hs-test-release-SNAPSHOT.jar:na]\n\tat AccountServiceTest.restartApplication(AccountServiceTest.java:330)\
    \ ~[test/:na]\n\tat AccountServiceTest.lambda$new$32(AccountServiceTest.java:765)\
    \ ~[test/:na]\n\tat org.hyperskill.hstest.dynamic.input.DynamicTesting.lambda$null$2(DynamicTesting.java:289)\
    \ ~[hs-test-release-SNAPSHOT.jar:na]\n\tat org.hyperskill.hstest.dynamic.input.DynamicTesting$1DynamicTestElement.lambda$null$0(DynamicTesting.java:252)\
    \ ~[hs-test-release-SNAPSHOT.jar:na]\n\tat org.hyperskill.hstest.testing.runner.SpringApplicationRunner.test(SpringApplicationRunner.java:43)\
    \ ~[hs-test-release-SNAPSHOT.jar:na]\n\tat org.hyperskill.hstest.testing.TestRun.test(TestRun.java:87)\
    \ ~[hs-test-release-SNAPSHOT.jar:na]\n\tat org.hyperskill.hstest.stage.StageTest.start(StageTest.java:116)\
    \ ~[hs-test-release-SNAPSHOT.jar:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method) ~[na:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\
    \ ~[na:na]\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\
    \ ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]\n\
    \tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\
    \ ~[junit-4.13.jar:4.13]\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\
    \ ~[junit-4.13.jar:4.13]\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\
    \ ~[junit-4.13.jar:4.13]\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\
    \ ~[junit-4.13.jar:4.13]\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\
    \ ~[junit-4.13.jar:4.13]\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\
    \ ~[junit-4.13.jar:4.13]\n\tat org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)\
    \ ~[junit-4.13.jar:4.13]\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)\
    \ ~[junit-4.13.jar:4.13]\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)\
    \ ~[junit-4.13.jar:4.13]\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)\
    \ ~[junit-4.13.jar:4.13]\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\
    \ ~[junit-4.13.jar:4.13]\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\
    \ ~[junit-4.13.jar:4.13]\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\
    \ ~[junit-4.13.jar:4.13]\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\
    \ ~[junit-4.13.jar:4.13]\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\
    \ ~[junit-4.13.jar:4.13]\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\
    \ ~[junit-4.13.jar:4.13]\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\
    \ ~[junit-4.13.jar:4.13]\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)\
    \ ~[na:na]\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)\
    \ ~[na:na]\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)\
    \ ~[na:na]\n\tat org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)\
    \ ~[na:na]\n\tat org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)\
    \ ~[na:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method) ~[na:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\
    \ ~[na:na]\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\
    \ ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]\n\
    \tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\
    \ ~[na:na]\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\
    \ ~[na:na]\n\tat org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)\
    \ ~[na:na]\n\tat org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)\
    \ ~[na:na]\n\tat com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[na:na]\n\
    \tat org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:119)\
    \ ~[na:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method) ~[na:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\
    \ ~[na:na]\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\
    \ ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]\n\
    \tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\
    \ ~[na:na]\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\
    \ ~[na:na]\n\tat org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:182)\
    \ ~[na:na]\n\tat org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:164)\
    \ ~[na:na]\n\tat org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:414)\
    \ ~[na:na]\n\tat org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)\
    \ ~[na:na]\n\tat org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:48)\
    \ ~[na:na]\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\
    \ ~[na:na]\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\
    \ ~[na:na]\n\tat org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:56)\
    \ ~[na:na]\n\tat java.base/java.lang.Thread.run(Thread.java:834) ~[na:na]\nCaused\
    \ by: org.springframework.beans.factory.BeanCreationException: Error creating\
    \ bean with name &#39;dataLoader&#39; defined in file [C:\\Users\\1\\IdeaProjects\\\
    Account Service\\Account Service\\task\\build\\classes\\java\\main\\account\\\
    config\\DataLoader.class]: Bean instantiation via constructor failed; nested exception\
    \ is org.springframework.beans.BeanInstantiationException: Failed to instantiate\
    \ [account.config.DataLoader]: Constructor threw exception; nested exception is\
    \ org.springframework.web.server.ResponseStatusException: 500 INTERNAL_SERVER_ERROR\
    \ &quot;Role creating problem&quot;\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:313)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:294)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1358)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1204)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1304)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1224)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\t... 84 common frames omitted\n\
    Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate\
    \ [account.config.DataLoader]: Constructor threw exception; nested exception is\
    \ org.springframework.web.server.ResponseStatusException: 500 INTERNAL_SERVER_ERROR\
    \ &quot;Role creating problem&quot;\n\tat org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:217)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:117)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.beans.factory.support.ConstructorResolver.lambda$instantiate$0(ConstructorResolver.java:305)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat java.base/java.security.AccessController.doPrivileged(Native\
    \ Method) ~[na:na]\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:304)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\t... 97 common frames omitted\n\
    Caused by: org.springframework.web.server.ResponseStatusException: 500 INTERNAL_SERVER_ERROR\
    \ &quot;Role creating problem&quot;\n\tat account.config.DataLoader.createRoles(DataLoader.java:28)\
    \ ~[main/:na]\n\tat account.config.DataLoader.&lt;init&gt;(DataLoader.java:19)\
    \ ~[main/:na]\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native\
    \ Method) ~[na:na]\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\
    \ ~[na:na]\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\
    \ ~[na:na]\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\
    \ ~[na:na]\n\tat org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:204)\
    \ ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\t... 101 common frames omitted"
  time: Sun, 13 Feb 2022 09:58:47 UTC
record: -1
